import fs from 'fs'

import { LotionConfig, LotionInput } from 'src/types'

const resolveTypeDefinition = (config: LotionConfig) => {
   const getType = (field: string) => {
      const { type, transform } = config.input.find(input => input.field === field) || ({} as LotionInput)

      if (transform) {
         // TODO: figure out how to define transformed data
         return 'any'
      }

      switch (type) {
         case 'uuid':
            return 'string'
         case 'text':
            return 'string'
         case 'richText':
            return 'SchemaRichTextItem[]'
         case 'number':
            return 'number'
         case 'boolean':
            return 'boolean'
         case 'files':
            return 'string[]'
         case 'file':
            return 'string'
         case 'images':
            return 'SchemaImage[]'
         case 'image':
            return 'SchemaImage'
         case 'options':
            return 'string[]'
         case 'option':
            return 'string'
         default:
            return 'any'
      }
   }

   const defineObject = (schema: any) => {
      const defined: any = {}
      Object.keys(schema).forEach(key => {
         const field = schema[key]
         if (typeof field === 'string') {
            defined[key] = getType(field)
         } else if (typeof field === 'object') {
            defined[key] = defineObject(field)
         } else {
            defined[key] = 'any'
         }
      })
      return defined
   }

   return defineObject(config.schema)
}

export const useTypescriptTemplate = (data: any, filePath: string, config: LotionConfig) => {
   const typeDefinition = resolveTypeDefinition(config)
   // prettier-ignore
   fs.writeFileSync(
      filePath,
`/* This file has been generated by a Lotion configuration script. */

export interface SchemaRichTextAnnotations {
	bold: boolean
	italic: boolean
	underline: boolean
	strikethrough: boolean
	code: boolean
	color: string | null
}

export interface SchemaRichTextItem {
	text: string
	href: string | null
	annotations: SchemaRichTextAnnotations
}

export interface SchemaImage {
	url: string
	width: number
	height: number
}

export interface Schema ${JSON.stringify(typeDefinition, null, 2).replace(/"/g, '')}

const DATA:Schema[] = ${JSON.stringify(data, null, 2)}
export default DATA`
   )
}
